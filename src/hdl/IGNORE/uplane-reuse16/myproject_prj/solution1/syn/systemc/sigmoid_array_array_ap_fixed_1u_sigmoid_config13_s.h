// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_HH_
#define _sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_sigmoidEe.h"

namespace ap_rtl {

struct sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > data_V_data_V_dout;
    sc_in< sc_logic > data_V_data_V_empty_n;
    sc_out< sc_logic > data_V_data_V_read;
    sc_in< sc_logic > res_V_data_V_TREADY;
    sc_out< sc_lv<16> > res_V_data_V_TDATA;
    sc_out< sc_logic > res_V_data_V_TVALID;


    // Module declarations
    sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s(sc_module_name name);
    SC_HAS_PROCESS(sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s);

    ~sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s();

    sc_trace_file* mVcdFile;

    sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_sigmoidEe* sigmoid_table10_U;
    regslice_both<16>* regslice_both_res_V_data_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< sc_logic > regslice_both_res_V_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > sigmoid_table10_address0;
    sc_signal< sc_logic > sigmoid_table10_ce0;
    sc_signal< sc_lv<10> > sigmoid_table10_q0;
    sc_signal< sc_logic > data_V_data_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > res_V_data_V_TDATA_blk_n;
    sc_signal< sc_lv<13> > sext_ln850_fu_134_p1;
    sc_signal< sc_lv<13> > sext_ln850_reg_253;
    sc_signal< sc_lv<1> > icmp_ln850_fu_138_p2;
    sc_signal< sc_lv<1> > icmp_ln850_reg_259;
    sc_signal< sc_lv<1> > icmp_ln851_fu_156_p2;
    sc_signal< sc_lv<1> > icmp_ln851_reg_264;
    sc_signal< sc_lv<13> > add_ln700_fu_162_p2;
    sc_signal< sc_lv<13> > add_ln700_reg_269;
    sc_signal< sc_lv<13> > select_ln850_fu_173_p3;
    sc_signal< sc_lv<13> > select_ln850_reg_274;
    sc_signal< sc_lv<1> > tmp_2_reg_279;
    sc_signal< sc_lv<1> > icmp_ln108_fu_203_p2;
    sc_signal< sc_lv<1> > icmp_ln108_reg_285;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln109_fu_243_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<12> > tmp_1_fu_124_p4;
    sc_signal< sc_lv<26> > shl_ln_fu_116_p3;
    sc_signal< sc_lv<4> > trunc_ln851_fu_144_p1;
    sc_signal< sc_lv<10> > p_Result_3_i_i_i_fu_148_p3;
    sc_signal< sc_lv<13> > select_ln851_fu_168_p3;
    sc_signal< sc_lv<13> > add_ln106_fu_179_p2;
    sc_signal< sc_lv<3> > tmp_3_fu_193_p4;
    sc_signal< sc_lv<10> > trunc_ln106_fu_209_p1;
    sc_signal< sc_lv<1> > xor_ln107_fu_218_p2;
    sc_signal< sc_lv<1> > or_ln107_fu_231_p2;
    sc_signal< sc_lv<10> > select_ln107_fu_223_p3;
    sc_signal< sc_lv<10> > xor_ln106_fu_212_p2;
    sc_signal< sc_lv<10> > select_ln107_1_fu_235_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to3;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<16> > res_V_data_V_TDATA_int;
    sc_signal< sc_logic > res_V_data_V_TVALID_int;
    sc_signal< sc_logic > res_V_data_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_res_V_data_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<26> ap_const_lv26_3FFFFF1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<13> ap_const_lv13_200;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_3FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln106_fu_179_p2();
    void thread_add_ln700_fu_162_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to3();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_data_V_data_V_blk_n();
    void thread_data_V_data_V_read();
    void thread_icmp_ln108_fu_203_p2();
    void thread_icmp_ln850_fu_138_p2();
    void thread_icmp_ln851_fu_156_p2();
    void thread_or_ln107_fu_231_p2();
    void thread_p_Result_3_i_i_i_fu_148_p3();
    void thread_res_V_data_V_TDATA_blk_n();
    void thread_res_V_data_V_TDATA_int();
    void thread_res_V_data_V_TVALID();
    void thread_res_V_data_V_TVALID_int();
    void thread_select_ln107_1_fu_235_p3();
    void thread_select_ln107_fu_223_p3();
    void thread_select_ln850_fu_173_p3();
    void thread_select_ln851_fu_168_p3();
    void thread_sext_ln850_fu_134_p1();
    void thread_shl_ln_fu_116_p3();
    void thread_sigmoid_table10_address0();
    void thread_sigmoid_table10_ce0();
    void thread_tmp_1_fu_124_p4();
    void thread_tmp_3_fu_193_p4();
    void thread_trunc_ln106_fu_209_p1();
    void thread_trunc_ln851_fu_144_p1();
    void thread_xor_ln106_fu_212_p2();
    void thread_xor_ln107_fu_218_p2();
    void thread_zext_ln109_fu_243_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
