-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_V_TREADY : IN STD_LOGIC;
    res_V_data_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv26_3FFFFF1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111110001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_200 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal regslice_both_res_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sigmoid_table10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sigmoid_table10_ce0 : STD_LOGIC;
    signal sigmoid_table10_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal sext_ln850_fu_134_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln850_reg_253 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln850_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln850_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_162_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln700_reg_269 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln850_fu_173_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln850_reg_274 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln109_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_1_fu_124_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_116_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln851_fu_144_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_3_i_i_i_fu_148_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln851_fu_168_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln106_fu_179_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_193_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln106_fu_209_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln107_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_fu_223_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln106_fu_212_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln107_1_fu_235_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_V_data_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_data_V_TVALID_int : STD_LOGIC;
    signal res_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_data_V_U_vld_out : STD_LOGIC;

    component sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_sigmoidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    sigmoid_table10_U : component sigmoid_array_array_ap_fixed_1u_sigmoid_config13_s_sigmoidEe
    generic map (
        DataWidth => 10,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sigmoid_table10_address0,
        ce0 => sigmoid_table10_ce0,
        q0 => sigmoid_table10_q0);

    regslice_both_res_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_V_data_V_TDATA_int,
        vld_in => res_V_data_V_TVALID_int,
        ack_in => res_V_data_V_TREADY_int,
        data_out => res_V_data_V_TDATA,
        vld_out => regslice_both_res_V_data_V_U_vld_out,
        ack_out => res_V_data_V_TREADY,
        apdone_blk => regslice_both_res_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_reg_269 <= add_ln700_fu_162_p2;
                icmp_ln108_reg_285 <= icmp_ln108_fu_203_p2;
                icmp_ln850_reg_259 <= icmp_ln850_fu_138_p2;
                icmp_ln851_reg_264 <= icmp_ln851_fu_156_p2;
                select_ln850_reg_274 <= select_ln850_fu_173_p3;
                sext_ln850_reg_253 <= sext_ln850_fu_134_p1;
                tmp_2_reg_279 <= add_ln106_fu_179_p2(12 downto 12);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln106_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv13_200) + unsigned(select_ln850_fu_173_p3));
    add_ln700_fu_162_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sext_ln850_fu_134_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter4, data_V_data_V_empty_n, regslice_both_res_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((regslice_both_res_V_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, data_V_data_V_empty_n, regslice_both_res_V_data_V_U_apdone_blk, res_V_data_V_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((res_V_data_V_TREADY_int = ap_const_logic_0) or (regslice_both_res_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((res_V_data_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, data_V_data_V_empty_n, regslice_both_res_V_data_V_U_apdone_blk, res_V_data_V_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((res_V_data_V_TREADY_int = ap_const_logic_0) or (regslice_both_res_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((res_V_data_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, data_V_data_V_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (data_V_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(regslice_both_res_V_data_V_U_apdone_blk)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (regslice_both_res_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln108_fu_203_p2 <= "0" when (tmp_3_fu_193_p4 = ap_const_lv3_0) else "1";
    icmp_ln850_fu_138_p2 <= "1" when (signed(shl_ln_fu_116_p3) < signed(ap_const_lv26_3FFFFF1)) else "0";
    icmp_ln851_fu_156_p2 <= "1" when (p_Result_3_i_i_i_fu_148_p3 = ap_const_lv10_0) else "0";
    or_ln107_fu_231_p2 <= (tmp_2_reg_279 or icmp_ln108_reg_285);
    p_Result_3_i_i_i_fu_148_p3 <= (trunc_ln851_fu_144_p1 & ap_const_lv6_0);

    res_V_data_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, res_V_data_V_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            res_V_data_V_TDATA_blk_n <= res_V_data_V_TREADY_int;
        else 
            res_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigmoid_table10_q0),16));
    res_V_data_V_TVALID <= regslice_both_res_V_data_V_U_vld_out;

    res_V_data_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_data_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln107_1_fu_235_p3 <= 
        select_ln107_fu_223_p3 when (or_ln107_fu_231_p2(0) = '1') else 
        xor_ln106_fu_212_p2;
    select_ln107_fu_223_p3 <= 
        ap_const_lv10_3FF when (xor_ln107_fu_218_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln850_fu_173_p3 <= 
        select_ln851_fu_168_p3 when (icmp_ln850_reg_259(0) = '1') else 
        sext_ln850_reg_253;
    select_ln851_fu_168_p3 <= 
        sext_ln850_reg_253 when (icmp_ln851_reg_264(0) = '1') else 
        add_ln700_reg_269;
        sext_ln850_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_124_p4),13));

    shl_ln_fu_116_p3 <= (data_V_data_V_dout & ap_const_lv10_0);
    sigmoid_table10_address0 <= zext_ln109_fu_243_p1(10 - 1 downto 0);

    sigmoid_table10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sigmoid_table10_ce0 <= ap_const_logic_1;
        else 
            sigmoid_table10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_124_p4 <= data_V_data_V_dout(15 downto 4);
    tmp_3_fu_193_p4 <= add_ln106_fu_179_p2(12 downto 10);
    trunc_ln106_fu_209_p1 <= select_ln850_reg_274(10 - 1 downto 0);
    trunc_ln851_fu_144_p1 <= data_V_data_V_dout(4 - 1 downto 0);
    xor_ln106_fu_212_p2 <= (trunc_ln106_fu_209_p1 xor ap_const_lv10_200);
    xor_ln107_fu_218_p2 <= (tmp_2_reg_279 xor ap_const_lv1_1);
    zext_ln109_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_1_fu_235_p3),64));
end behav;
